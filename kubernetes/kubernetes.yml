apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE}  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ${APPLICATION_NAME}
  name: ${APPLICATION_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APPLICATION_NAME}
  template:
    metadata:
      labels:
        app: ${APPLICATION_NAME}
    spec:      
      containers:
        - image: '${IMAGE_REPOSITORY}/${IMAGE_SUBPATH}${APPLICATION_NAME}:${IMAGE_TAG}'
          name: ${APPLICATION_NAME}          
          env:
            - name: APPSETTINGS__AUTHORITY
              value: '${APPSETTINGS__AUTHORITY}'            
            - name: APPSETTINGS__CLIENTID
              value: '${APPSETTINGS__CLIENTID}'       
            - name: APPSETTINGS__CLIENTSECRET
              value: '${APPSETTINGS__CLIENTSECRET}'       
            - name: APPSETTINGS__APPLICATIONURL
              value: 'https://${HOSTNAME}'                                 
          resources:
            limits:
              cpu: 200m
              memory: 1Gi
            requests:
              cpu: 20m
              memory: 20Mi      
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ${APPLICATION_NAME}
  name: ${APPLICATION_NAME}
spec:
  ports:
    - name: 5015-tcp
      port: 5015
      protocol: TCP
      targetPort: 5015
  selector:
    app: ${APPLICATION_NAME}
---
kind: Secret
apiVersion: v1
metadata:
  name: ${INGRESS_SECRET_NAME}  
data:
  tls.crt: >-
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdRekNDQlN1Z0F3SUJBZ0lRQWhGbGxZdUdaOWRIUmhYWTNGNC93ekFOQmdrcWhraUc5dzBCQVFzRkFEQmUKTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCMwpkM2N1WkdsbmFXTmxjblF1WTI5dE1SMHdHd1lEVlFRREV4UlNZWEJwWkZOVFRDQlNVMEVnUTBFZ01qQXhPREFlCkZ3MHhPVEE0TVRJd01EQXdNREJhRncweU1URXdNVE14TWpBd01EQmFNQjh4SFRBYkJnTlZCQU1NRkNvdWMybG4KYm1GMGRYSm5jblZ3Y0dWdUxtUnJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQQp0SnNoVGVSL3pxM1hDc01PVW90QmNtakNYQU11U05CWlBxQVFNVGpDV3krdkplSExlaXRHZEJieEdvcUlKZ1c4ClM5UlFoekdZTWxBYk9rR3VnUEtveDVJbTZEbUJ2WUkvcExTRXh4eWVjKzRGZHdkZExYYTYwTlFjRnMra2Jvb2wKTFdQWFVvVmRjNkVZY1Y5Y2pkeG5VZVUyQUJHRHR1ZnNPbWUzTEdHMUE0a2NwNGJTRGtGVFVKbURISjNjaHR1KwpyZ2lVNjY0V2VlLzlzOWZsaDd1T2o0Z2Y4SHIxclM0TjQ2V2tPWmZOZnF2QUtnTDBUb3k4SzJBSGlvOW56QmpsCkZXVzh3SERMWXZaM1FTRUl6a21IZFZneDBqWlNCamlBSFFqQ0JMVmt2a0RwUFdRd01hc0k0Y1cwQzV3c2RpSUgKNjkwOS94K3VrRlROY0tzeGZWSTJYd0lEQVFBQm80SURPakNDQXpZd0h3WURWUjBqQkJnd0ZvQVVVOG9YV2Z4cgp3QU1oTHhxdTVLcW9ISUpXMm5Vd0hRWURWUjBPQkJZRUZJM3d1aWw3M0Y5STNQcDZ2R0ZaaURrK3NudjdNRE1HCkExVWRFUVFzTUNxQ0ZDb3VjMmxuYm1GMGRYSm5jblZ3Y0dWdUxtUnJnaEp6YVdkdVlYUjFjbWR5ZFhCd1pXNHUKWkdzd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjRApBakErQmdOVkhSOEVOekExTURPZ01hQXZoaTFvZEhSd09pOHZZMlJ3TG5KaGNHbGtjM05zTG1OdmJTOVNZWEJwClpGTlRURkpUUVVOQk1qQXhPQzVqY213d1RBWURWUjBnQkVVd1F6QTNCZ2xnaGtnQmh2MXNBUUl3S2pBb0JnZ3IKQmdFRkJRY0NBUlljYUhSMGNITTZMeTkzZDNjdVpHbG5hV05sY25RdVkyOXRMME5RVXpBSUJnWm5nUXdCQWdFdwpkUVlJS3dZQkJRVUhBUUVFYVRCbk1DWUdDQ3NHQVFVRkJ6QUJoaHBvZEhSd09pOHZjM1JoZEhWekxuSmhjR2xrCmMzTnNMbU52YlRBOUJnZ3JCZ0VGQlFjd0FvWXhhSFIwY0RvdkwyTmhZMlZ5ZEhNdWNtRndhV1J6YzJ3dVkyOXQKTDFKaGNHbGtVMU5NVWxOQlEwRXlNREU0TG1OeWREQUpCZ05WSFJNRUFqQUFNSUlCZmdZS0t3WUJCQUhXZVFJRQpBZ1NDQVc0RWdnRnFBV2dBZGdEdVM3MjNkYzVndXVGQ2FSK3I0WjVtb3c5K1g3QnkySU1BeEh1SmVxajl5d0FBCkFXeUZlS0QxQUFBRUF3QkhNRVVDSVFDNUxlSkJzc1dnN3Z3WmVqbkpUTHJUcWdOaGVmMGpiQXJaMENuZCs1VkoKeGdJZ0NtYUJRMmFpeXNlOGdTMnJjY3BmZVF0RCthdzdZeW1SUmNSSmFQQjN1MzRBZGdDSGRiL25XWHo0akVPWgpYNzN6YnY5V2pVZFdOdjlLdFdEQnRPci9YcUNERHdBQUFXeUZlS0dVQUFBRUF3QkhNRVVDSUJOYlRnamdrUVpZCnR0a0JCcnZrMnNhdnVveHZtK3pPeVlvczFqeVJ1SHJEQWlFQWpvK0hvUy9mOHNncS9QN0wxUjNPUUUzMGFJTE8KeEN2WUxKbGxRZ1Z4Sjk0QWRnQkVsR1V1c083T3I4UkFCOWlvL2lqQTJ1YUN2dGpMTWJVLzB6T1d0YmFCcUFBQQpBV3lGZUtDYUFBQUVBd0JITUVVQ0lRQ0kraHY4MTdpdmRBZzJkcVVnbVFEWGxLWmtFcXhTUXBXNlZyZ253UFJWCmpnSWdPanVzcmJDcFpodVBwaDVKdVp4VThvZ3RueVhmNWt1eHpHazhvVThGMk5vd0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnRUJBTTRvaTlWa2p3Nm51QmpURkREYlRuTFpkeTJveUVVWDJlMDB6VlhHQ3JNQ3BKakg0RnNjQnNKcwpKblJLVXh6ZjRMMkY2RmRPWjRac2IwVS9wd1BYZVEyKzZzZlBha2JkNGV1Vy9lWTUrTGcvNG5XdXBFakV2c0xjCkZOcDRTRWEzS0h5a1pvQndiQjl0c0sraEhPNjZZTG04Yi9sNGtiVGJtbGJpU215SXYybXdGNnZkdm5SQ0VreTgKaXJOMWtCbVBPNzVGdlY3enk4d0pZc3kwNTJFcjF4U0kwSWZuRzNMbldDbzF1Z2xGOW5Tb0dIcDdqajZ6M1hCZgp0bkZ1N1dreSs3Sk5reVgrVmRUcm5MSUJVNDRWbnVTb25wbnJwbXR3cmFJSmVWUGpXOHZmYWlmYnBFTDhTV0VSCnVYU0NzRmVJelBQQzFnS3hNYnlIYXdtT2xRYkkwdjA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVzVENDQTVtZ0F3SUJBZ0lRQ0tXaVJzMUxYSXlEMXdLMHU2dFRTVEFOQmdrcWhraUc5dzBCQVFzRkFEQmgKTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCMwpkM2N1WkdsbmFXTmxjblF1WTI5dE1TQXdIZ1lEVlFRREV4ZEVhV2RwUTJWeWRDQkhiRzlpWVd3Z1VtOXZkQ0JEClFUQWVGdzB4TnpFeE1EWXhNakl6TXpOYUZ3MHlOekV4TURZeE1qSXpNek5hTUY0eEN6QUpCZ05WQkFZVEFsVlQKTVJVd0V3WURWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1agpiMjB4SFRBYkJnTlZCQU1URkZKaGNHbGtVMU5NSUZKVFFTQkRRU0F5TURFNE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTVTMm9paEVvOW5ucGV6b3ppRHR4NFdXTExDbGwvZTB0MUVZZW1FNW4KK01nUDV2aWFITHkrVnBIUCtuZFg1RDE4SU5JdXVBVjh3RnEyNktGNVUwV05JWmlRcDZtTHRJV2pVZVdEUEEyOApPZXloVGxqOVRMazJiZXl0YnRGVTZ5cGJwV1VsdG12WTVWOG5nc3BDN25GUk5DanBmbkRFRDJrUnlKek84eW9LCk1GejRKNEpFOE43TkExdUp3VUVGTVV2SExzMHNjTG9QWmtLY2V3SVJtMVJWMkF4bUZReEprZGY3WU45UGNra2kKZjJYZ20zYjQ4QlpuMHpmMHFYc1NlR3U4NHVhOWd3emp6STd0YlRCamF5VHBUKy9YcFd1QlZ2NmZ2YXJJNmJpawpLQjg1OU9TR1F1dzczWFhnZXVGd0VQSFRJUm9VdGt6dTMvRVErTHR3em5ra2RRSURBUUFCbzRJQlpqQ0NBV0l3CkhRWURWUjBPQkJZRUZGUEtGMW44YThBRElTOGFydVNxcUJ5Q1Z0cDFNQjhHQTFVZEl3UVlNQmFBRkFQZVVEVlcKMFV5N1p2Q2o0aHNidzVleVBkRlZNQTRHQTFVZER3RUIvd1FFQXdJQmhqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRgpCUWNEQVFZSUt3WUJCUVVIQXdJd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFEQTBCZ2dyQmdFRkJRY0JBUVFvCk1DWXdKQVlJS3dZQkJRVUhNQUdHR0doMGRIQTZMeTl2WTNOd0xtUnBaMmxqWlhKMExtTnZiVEJDQmdOVkhSOEUKT3pBNU1EZWdOYUF6aGpGb2RIUndPaTh2WTNKc015NWthV2RwWTJWeWRDNWpiMjB2UkdsbmFVTmxjblJIYkc5aQpZV3hTYjI5MFEwRXVZM0pzTUdNR0ExVWRJQVJjTUZvd053WUpZSVpJQVliOWJBRUNNQ293S0FZSUt3WUJCUVVICkFnRVdIR2gwZEhCek9pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOURVRk13Q3dZSllJWklBWWI5YkFFQk1BZ0cKQm1lQkRBRUNBVEFJQmdabmdRd0JBZ0l3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUg0angvTEtOVzVaa2xGYwpZV3M4RWpibTBueXpLZVpDMktPVllSN1A4Z2V2S3lzbFdtNFhvNEJTektyMjM1RnNKNGFGdDZ5QWl2MWVZMHRaCi9aTjE4Yk9HU0dTdG9FYy9KRTRvY0l6cjhQNU1nMTFrUllIYm1nWW5yMVJ4ZWtpNW1TZWIzOURHeFRwSkQ0a0cKaHM1bFhOb280Y29uVWlpSndLYXFIN3ZoMmJhcnlkOHBNSVNhZzgzSlVxeVZHYzJ0V1BwTzAzMjkvQ1dxMmtyeQpxdjY2T1NNand1bFV6MGRYZjRPSFFhc1I3Q05mSXIrNEtTY2M2QUJsUTVSREY4NlBHZUU2a2R3U1FrRmlCL2NRCnlzTnlxMGpFRFFUa2ZhMnBqbXVXdE1DTmJCbmhGWEJZZWpmdWJJaGFVYkV2MkZPUUIzZENhditGUGc1ZUV2ZVgKVFZ5TW5Hbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRHJ6Q0NBcGVnQXdJQkFnSVFDRHZnVnBCQ1JyR2hkV3JKV1pISFNqQU5CZ2txaGtpRzl3MEJBUVVGQURCaApNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzCmQzY3VaR2xuYVdObGNuUXVZMjl0TVNBd0hnWURWUVFERXhkRWFXZHBRMlZ5ZENCSGJHOWlZV3dnVW05dmRDQkQKUVRBZUZ3MHdOakV4TVRBd01EQXdNREJhRncwek1URXhNVEF3TURBd01EQmFNR0V4Q3pBSkJnTlZCQVlUQWxWVApNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqCmIyMHhJREFlQmdOVkJBTVRGMFJwWjJsRFpYSjBJRWRzYjJKaGJDQlNiMjkwSUVOQk1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTRqdmhFWExlcUtUVG8xZXFVS0tQQzNlUXlhS2w3aExPbGxzQgpDU0RNQVpPblRqQzNVL2REeEdrQVY1M2lqU0xkaHdaQUFJRUp6czRiZzcvZnpUdHhSdUxXWnNjRnMzWW5Gbzk3Cm5oNlZmZTYzU0tNSTJ0YXZlZ3c1Qm1WL1NsMGZ2QmY0cTc3dUtOZDBmM3A0bVZtRmFHNWNJekpMdjA3QTZGcHQKNDNDL2R4Qy8vQUgyaGRtb1JCQllNcWwxR05YUm9yNUg0aWRxOUpveitFa0lZSXZVWDdRNmhMK2hxa3BNZlQ3UApUMTlzZGw2Z1N6ZVJudHdpNW0zT0ZCcU9hc3YremJNVVpCZkhXeW1lTXIveTd2clRDMExVcTdkQk10b00xTy80CmdkVzdqVmcvdFJ2b1NTaWljTm94Qk4zM3NoYnlUQXBPQjZqdFNqMWV0WCtqa01Pdkp3SURBUUFCbzJNd1lUQU8KQmdOVkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVBOTVRTlZiUgpUTHRtOEtQaUd4dkRsN0k5MFZVd0h3WURWUjBqQkJnd0ZvQVVBOTVRTlZiUlRMdG04S1BpR3h2RGw3STkwVlV3CkRRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFNdWNONnBJRXhJSyt0MUVuRTlTc1BUZnJnVDFlWGtJb3lRWS9Fc3IKaE1BdHVkWEgvdlRCSDFqTHVHMmNlblRubUNtckViWGpjS0NoelV5SW1aT01rWERpcXc4Y3ZwT3AvMlBWNUFkZwowNk8vblZzSjhkV080MVAwam1QNlA2ZmJ0R2JmWW1iVzBXNUJqZkl0dGVwM1NwK2RXT0lyV2NCQUkrMHRLSUpGClBubFVraWFZNElCSXFEZnY4Tlo1WUJiZXJPZ096VzZzUkJjNEwwbmE0VVUrS3JrMlU4ODZVQWIzTHVqRVYwbHMKWVNFWTFRU3RlRHdzT29CcnArdXZGUlRwMkluQnVUaHM0cEZzaXY5a3VYY2xWekRBR3lTajRkenAzMGQ4dGJRawpDQVV3N0MyOUM3OUZ2MUM1cWZQcm1BRVNyY2lJeHBnMFg0MEtQTWJwMVpXVmJkND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: >-
    ${CERTIFICATE_KEY}
type: kubernetes.io/tls
---
kind: Ingress
apiVersion: networking.k8s.io/v1beta1
metadata:
  name: ${APPLICATION_NAME}
  labels:
    app: ${APPLICATION_NAME}
  annotations:    
    nginx.ingress.kubernetes.io/proxy-body-size: 8m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 1m    
    nginx.ingress.kubernetes.io/server-snippet: |-      
      http2_max_header_size 100k;
      http2_max_field_size 100k;    
spec:
  tls:
    - hosts:
        - ${HOSTNAME}
      secretName: ${INGRESS_SECRET_NAME}
  rules:
    - host: ${HOSTNAME}
      http:
        paths:
          - path: /
            backend:
              serviceName: ${APPLICATION_NAME}
              servicePort: 5015
